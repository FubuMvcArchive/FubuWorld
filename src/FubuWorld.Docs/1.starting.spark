<markdown>  
  <Section title="Starting a new Document Project" id="csproj">
  
  
  
Using <a href="https://github.com/DarthFubuMVC/fubucore">FubuCore</a> as an example solution, we followed these steps to create a new documentation project:

TODO(Add a link to FubuDocsRunner)
TODO(Add a topic about working with the Rake tasks)
TODO(Use a picture)
TODO(clear out the stupid old doc tasks for sphinx)

1. Make sure that the /buildsupport submodule is updated to the latest.  If you type <code>rake -T</code> you should see rake tasks for <code>docs:bottle</code>, <code>docs:run</code>, <code>docs:run_chrome</code>, <code>docs:run_firefox</code>, and <code>docs:snippets</code>.  See the section on <code>Updating buildsupport</code> below.
1. Add a new project named "[SOMETHING].Docs" as a class library.  In this case, the naming convention of ".Docs" tells the FubuDocsRunner tool that this project is the documentation project for the solution.
1. Run <code>rake docs:bottle</code> to seed the project as a FubuWorld documentation Bottle.  The initial run of this task will add a <code>.package-manifest</code> file, create the standard zip file entries for an assembly bottle, add a default <code>index.spark</code> view, and add a new file named <code>project.xml</code> that holds common metadata.
1. See the section below about editing the <code>project.xml</code> file.
1. In the main rake file for the solution (<code>rakefile</code>), add the rake task <code>docs:bottle</code> as a dependency to the <code>:compile</code> task like so: <code>task :compile => [:clean, :restore_if_missing, :version, "docs:bottle"] do</code>.
1. The first call to <code>rake docs:bottle</code> will create a new nuspec file for the documentation assembly at /packaging/nuget/ that you may want to alter.  See <a href="https://github.com/DarthFubuMVC/fubucore/blob/master/packaging/nuget/fubucore.docs.nuspec">fubucore.docs.nuspec</a> for an example.

After doing all these steps, you're ready to start creating content.  See <code>TODO(add a link)</code> for more information about creating content.
</Section>

<Section title="project.xml" id="project-xml">
FubuWorld looks for a file named "project.xml" in the root of each documentation project for data that is common to all documentation projects.  
Again using FubuCore as an example, that file would look like the following:

<EmbedFile name="sample-project.xml" />

The elements of note are:

* **Name** - The user facing name for this content
* **GitHubPage** - link to the code repository that is covered by this documentation project
* **UserGroupUrl** - link to the user group for questions about this content
* **BuildServerUrl** - link to the specific project page on TeamCity
* **BottleName** - just the name of this bottle.  Typically just the assembly name.
* **Url** - the root url for all topics in this documentation project


Do note that the <code>rake docs:bottle</code> task can make some reasonable guesses about many of these values based on the documentation project name.  The <code>BuildServerUrl</code> element might be the only value you have to change by hand in most cases.
</Section>

<Section title="Updating buildsupport" id="buildsupport">
The binaries to support the FubuWorld documentation system are deployed to the <a href="https://github.com/DarthFubuMVC/buildsupport">buildsupport</a> GitHub repository that is included as the "/buildsupport" submodule in all projects.  Simple running "rake" from the command line in any FubuMVC related project with the standard configuration should update the buildsupport submodule, but it's not a perfect world so you may have to do this manually.

To update buildsupport manually, just open a command line prompt (or your CLI tool of choice) to the buildsupport directory and:

* Type <code>git status</code> first and make sure that your on the master branch.  Type <code>git checkout master</code> to put it on the master branch.
* Assuming that there's no outstanding changes to buildsupport, I'll usually take the lazy approach and just type <code>git pull origin master</code>.  Describing proper git workflow is far beyond (my knowledge) the scope of this documentation.
</Section>
</markdown>